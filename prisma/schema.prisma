generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                  @id @default(autoincrement())
  email            String               @unique
  abacusId         Int                  @unique @default(autoincrement()) @map("abacusid")
  name             String
  mobile           String
  year             Int
  dept             String
  college          String
  accomodation     Boolean?
  password         String
  referralCode     String?
  hostCollege      String?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @default(now()) @updatedAt
  events           Event[]
  token            ForgotPasswordToken?
  workshops        Workshop[]
  WorkshopPayment  WorkshopPayment[]
  CampusAmbassador CampusAmbassador?    @relation(fields: [referralCode], references: [referralCode])
  eventPayments    EventPayment[]
  accDetails       Accomodation?

  @@map("user")
}

model CampusAmbassador {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  college      String
  referralCode String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  users        User[]
}

model RegistrationToken {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ForgotPasswordToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Event {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model EventPayment {
  id            Int      @id @default(autoincrement())
  eventId       Int
  paymentMobile String
  transactionId String
  screenshot    String?  @unique
  status        Status
  verifiedBy    Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  users         User[]
  admin         Admin?   @relation(fields: [verifiedBy], references: [id])
}

model Workshop {
  id         Int      @id @default(autoincrement())
  userId     Int
  workshopId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Admin {
  id              Int               @id @default(autoincrement())
  name            String
  email           String            @unique
  password        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  WorkshopPayment WorkshopPayment[]
  EventPayment    EventPayment[]
}

model Queries {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  title     String
  message   String
  replied   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkshopPayment {
  id            Int      @id @default(autoincrement())
  workshopId    Int
  paymentMobile String
  transactionId String   @unique
  screenshot    String?  @unique
  status        Status
  verifiedBy    Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  users         User[]
  Admin         Admin?   @relation(fields: [verifiedBy], references: [id])
}

enum Status {
  PENDING
  SUCCESS
  FAILURE
}

model Accomodation {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  day0      Boolean
  day1      Boolean
  day2      Boolean
  day3      Boolean
  food      Boolean
  amount    Int
  paid      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
